///////////////////////////////////////////////////////////////////////////////
// FirstStepsVisionModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "FirstStepsVisionModule.h"
#include <string>
#include <vector>
#include "FirstStepsVersion.h"

DEFINE_LIBRARY_INFO_Tc3_Vision

using namespace std;
using namespace Tc3_Vision;

///////////////////////////////////////////////////////////////////////////////
// CFirstStepsVisionModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CFirstStepsVisionModule
BEGIN_INTERFACE_MAP(CFirstStepsVisionModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CFirstStepsVisionModule, VID_FirstSteps, CID_FirstStepsCFirstStepsVisionModule)
IMPLEMENT_ITCOMOBJECT(CFirstStepsVisionModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CFirstStepsVisionModule)
IMPLEMENT_ITCADI(CFirstStepsVisionModule)
IMPLEMENT_ITCWATCHSOURCE(CFirstStepsVisionModule)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CFirstStepsVisionModule 
BEGIN_SETOBJPARA_MAP(CFirstStepsVisionModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_FirstStepsVisionModuleoidITcVnImageProvider, m_oidITcVnImageProvider)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CFirstStepsVisionModule 
BEGIN_GETOBJPARA_MAP(CFirstStepsVisionModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_FirstStepsVisionModuleoidITcVnImageProvider, m_oidITcVnImageProvider)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CFirstStepsVisionModule
BEGIN_OBJPARAWATCH_MAP(CFirstStepsVisionModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CFirstStepsVisionModule
BEGIN_OBJDATAAREA_MAP(CFirstStepsVisionModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_FirstStepsVisionModuleImages, m_Images)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CFirstStepsVisionModule::CFirstStepsVisionModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_pCameraControl(nullptr)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_oidITcVnImageProvider = 0;
	memset(&m_Images, 0, sizeof(m_Images));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CFirstStepsVisionModule::~CFirstStepsVisionModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CFirstStepsVisionModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CFirstStepsVisionModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	
	if(FAILED(hr = TmlHandler::Create(m_spSrv, m_objId)))
		hr = TmlHandler::Destroy(m_spSrv);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CFirstStepsVisionModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization
	hr = TmlHandler::SetObjStateSO();

	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
		TmlHandler::SetObjStateOS();
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CFirstStepsVisionModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 
	safe_delete(m_pCameraControl);
	safe_release(m_Images.ipSrcImageDisp);
	safe_release(m_Images.ipDestImageDisp);
	
	hr = TmlHandler::SetObjStateOS();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CFirstStepsVisionModule::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	
	hr = TmlHandler::Destroy(m_spSrv);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CFirstStepsVisionModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	if(!TmlHandler::IsReady())
		return ADS_E_PENDING; // CycleUpdate might already be called while the Tc3_Vision driver is not yet fully operational
	if(!m_oidITcVnImageProvider)
		return ADS_E_NOTINIT; // oidITcVnImageProvider needs to be set to an image provider in the Parameter (Init) Tab of the module object
	
	if(!m_pCameraControl)
		m_pCameraControl = new SimpleCameraControl(m_oidITcVnImageProvider); // deleted in SetObjStateOS
	if(!m_pCameraControl)
		return ADS_E_NOMEMORY;
	
	HRESULT hr = S_OK;
	ITcVnImageVPtr spSrcImage;
	ITcVnImageVPtr spDestImage;
	
	ETcVnCameraState eState = m_pCameraControl->GetState();

	if(eState == CS_ERROR)
		hr = m_pCameraControl->Reset();
	else if(eState < CS_ACQUIRING)
		hr = m_pCameraControl->StartAcquisition();
	else if(eState == CS_ACQUIRING)
	{
		hr = m_pCameraControl->GetCurrentImage(spSrcImage);

		// TODO: Add your cyclic image processing code here
		hr = Threshold(hr, spSrcImage, spDestImage, 128, 255, TT_BINARY);

		hr = TransformIntoDisplayableImage(hr, spSrcImage, m_Images.ipSrcImageDisp);
		hr = TransformIntoDisplayableImage(hr, spDestImage, m_Images.ipDestImageDisp);
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CFirstStepsVisionModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CFirstStepsVisionModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}

